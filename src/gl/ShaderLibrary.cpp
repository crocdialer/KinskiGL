/* Generated file, do not edit! */

#include "ShaderLibrary.h"


char const* const unlit_vert = 
   "uniform mat4 u_modelViewProjectionMatrix;\n"
   "uniform mat4 u_textureMatrix;\n"
   "attribute vec4 a_vertex;\n"
   "attribute vec4 a_texCoord;\n"
   "attribute vec4 a_color;\n"
   "varying lowp vec4 v_color;\n"
   "varying lowp vec4 v_texCoord;\n"
   "void main(void)\n"
   "{\n"
   "  v_color = a_color;\n"
   "  v_texCoord =  u_textureMatrix * a_texCoord;\n"
   "  gl_Position = u_modelViewProjectionMatrix * a_vertex;\n"
   "}\n"
;

char const* const points_vert = 
   "uniform mat4 u_modelViewProjectionMatrix;\n"
   "uniform float u_pointSize;\n"
   "attribute vec4 a_vertex;\n"
   "attribute vec4 a_color;\n"
   "attribute float a_pointSize;\n"
   "varying lowp vec4 v_color;\n"
   "void main()\n"
   "{\n"
   "  gl_Position = u_modelViewProjectionMatrix * a_vertex;\n"
   "  gl_PointSize = a_pointSize;\n"
   "  v_color = a_color;\n"
   "}\n"
;

char const* const gouraud_vert = 
   "struct Material\n"
   "{ \n"
   "   vec4 diffuse;\n"
   "   vec4 ambient; \n"
   "   vec4 specular; \n"
   "   vec4 emission;\n"
   "   float shinyness;\n"
   "};\n"
   "uniform int u_numLights;\n"
   "struct Lightsource \n"
   "{\n"
   "  int type;\n"
   "  vec3 position;\n"
   "  vec4 diffuse; \n"
   "  vec4 ambient; \n"
   "  vec4 specular; \n"
   "  float constantAttenuation; \n"
   "  float linearAttenuation; \n"
   "  float quadraticAttenuation; \n"
   "  vec3 spotDirection; \n"
   "  float spotCosCutoff; \n"
   "  float spotExponent; \n"
   "};\n"
   "vec4 shade(in Lightsource light, in Material mat, in vec3 normal, in vec3 eyeVec, in vec4 base_color) \n"
   "{\n"
   "  vec3 lightDir = light.type > 0 ? (light.position - eyeVec) : -light.position;\n"
   "  vec3 L = normalize(lightDir); \n"
   "  vec3 E = normalize(-eyeVec); \n"
   "  vec3 R = reflect(-L, normal); \n"
   "  vec4 ambient = mat.ambient * light.ambient; \n"
   "  float att = 1.0; \n"
   "  float nDotL = dot(normal, L); \n"
   "  \n"
   "  if (light.type > 0) \n"
   "  {\n"
   "    float dist = length(lightDir); \n"
   "    att = 1.0 / (light.constantAttenuation + light.linearAttenuation * dist + light.quadraticAttenuation * dist * dist); \n"
   "    if(light.type > 1) \n"
   "    {\n"
   "      float spotEffect = dot(normalize(light.spotDirection), -L); \n"
   "      if (spotEffect < light.spotCosCutoff) \n"
   "      {\n"
   "        att = 0.0;\n"
   "        base_color * ambient; \n"
   "      }\n"
   "      spotEffect = pow(spotEffect, light.spotExponent); \n"
   "      att *= spotEffect; \n"
   "    }\n"
   "  } \n"
   "  nDotL = max(0.0, nDotL); \n"
   "  float specIntesity = clamp(pow( max(dot(R, E), 0.0), mat.shinyness), 0.0, 1.0); \n"
   "  vec4 diffuse = att * mat.diffuse * light.diffuse * vec4(vec3(nDotL), 1.0); \n"
   "  vec4 spec = att * mat.specular * light.specular * specIntesity; spec.a = 0.0; \n"
   "  return base_color * (ambient + diffuse) + spec; \n"
   "}\n"
   "uniform mat4 u_modelViewMatrix; \n"
   "uniform mat4 u_modelViewProjectionMatrix; \n"
   "uniform mat3 u_normalMatrix; \n"
   "uniform mat4 u_textureMatrix; \n"
   "uniform Material u_material; \n"
   "uniform Lightsource u_lights[2]; \n"
   "attribute vec4 a_vertex; \n"
   "attribute vec3 a_normal; \n"
   "attribute vec4 a_texCoord; \n"
   "varying vec4 v_color;\n"
   "varying vec4 v_texCoord; \n"
   "void main() \n"
   "{\n"
   "  v_texCoord = u_textureMatrix * a_texCoord;\n"
   "  vec3 normal = normalize(u_normalMatrix * a_normal); \n"
   "  vec3 eyeVec = (u_modelViewMatrix * a_vertex).xyz;\n"
   "  vec4 shade_color = vec4(0);\n"
   "  if(u_numLights > 0)\n"
   "    shade_color += shade(u_lights[0], u_material, normal, eyeVec, vec4(1)); \n"
   "  \n"
   "  if(u_numLights > 1)\n"
   "    shade_color += shade(u_lights[1], u_material, normal, eyeVec, vec4(1));\n"
   "  \n"
   "  v_color = shade_color; \n"
   "  gl_Position = u_modelViewProjectionMatrix * a_vertex; \n"
   "}\n"
;

char const* const phong_vert = 
   "uniform mat4 u_modelViewMatrix;\n"
   "uniform mat4 u_modelViewProjectionMatrix;\n"
   "uniform mat3 u_normalMatrix;\n"
   "uniform mat4 u_textureMatrix;\n"
   "attribute vec4 a_vertex;\n"
   "attribute vec4 a_texCoord;\n"
   "attribute vec3 a_normal;\n"
   "varying lowp vec4 v_texCoord;\n"
   "varying mediump vec3 v_normal;\n"
   "varying mediump vec3 v_eyeVec;\n"
   "void main()\n"
   "{\n"
   "  v_normal = normalize(u_normalMatrix * a_normal);\n"
   "  v_texCoord =  u_textureMatrix * a_texCoord;\n"
   "  v_eyeVec = - (u_modelViewMatrix * a_vertex).xyz;\n"
   "  gl_Position = u_modelViewProjectionMatrix * a_vertex;\n"
   "}\n"
;

char const* const phong_skin_vert = 
   "uniform mat4 u_modelViewMatrix;\n"
   "uniform mat4 u_modelViewProjectionMatrix;\n"
   "uniform mat3 u_normalMatrix;\n"
   "uniform mat4 u_textureMatrix;\n"
   "uniform mat4 u_bones[18];\n"
   "attribute vec4 a_vertex;\n"
   "attribute vec4 a_texCoord;\n"
   "attribute vec3 a_normal;\n"
   "attribute vec4 a_boneIds;\n"
   "attribute vec4 a_boneWeights;\n"
   "varying vec4 v_texCoord;\n"
   "varying vec3 v_normal;\n"
   "varying vec3 v_eyeVec;\n"
   "void main()\n"
   "{\n"
   "  vec4 newVertex = vec4(0.0);\n"
   "  vec4 newNormal = vec4(0.0);\n"
   "  \n"
   "  for (int i = 0; i < 4; i++)\n"
   "  {\n"
   "    newVertex += u_bones[int(floor(a_boneIds[i]))] * a_vertex * a_boneWeights[i];\n"
   "    newNormal += u_bones[int(floor(a_boneIds[i]))] * vec4(a_normal, 0.0) * a_boneWeights[i];\n"
   "  }\n"
   "  v_normal = normalize(u_normalMatrix * newNormal.xyz);\n"
   "  v_texCoord =  u_textureMatrix * a_texCoord;\n"
   "  v_eyeVec = - (u_modelViewMatrix * newVertex).xyz;\n"
   "  gl_Position = u_modelViewProjectionMatrix * vec4(newVertex.xyz, 1.0);\n"
   "}\n"
;

char const* const unlit_frag = 
   "precision mediump float;\n"
   "precision lowp int;\n"
   "uniform int u_numTextures;\n"
   "uniform sampler2D u_textureMap[1];\n"
   "uniform struct\n"
   "{\n"
   "  vec4 diffuse;\n"
   "  vec4 ambient;\n"
   "  vec4 specular;\n"
   "  vec4 emission;\n"
   "  float shinyness;\n"
   "} u_material;\n"
   "varying vec4 v_color;\n"
   "varying vec4 v_texCoord;\n"
   "void main(void)\n"
   "{\n"
   "  vec4 texColors = v_color;\n"
   "  if(u_numTextures > 0)\n"
   "    texColors *= texture2D(u_textureMap[0], v_texCoord.st);\n"
   "  gl_FragColor = u_material.diffuse * texColors;\n"
   "}\n"
;

char const* const phong_frag = 
   "precision mediump float;\n"
   "precision lowp int;\n"
   "uniform int u_numTextures;\n"
   "uniform sampler2D u_sampler_2D[2];\n"
   "uniform vec3 u_lightDir;\n"
   "uniform struct\n"
   "{\n"
   "  vec4 diffuse;\n"
   "  vec4 ambient;\n"
   "  vec4 specular;\n"
   "  vec4 emission;\n"
   "  float shinyness;\n"
   "} u_material;\n"
   "varying vec3 v_normal;\n"
   "varying vec4 v_texCoord;\n"
   "varying vec3 v_eyeVec;\n"
   "void main()\n"
   "{\n"
   "  vec4 texColors = vec4(1);\n"
   "  if(u_numTextures > 0) texColors *= texture2D(u_sampler_2D[0], v_texCoord.st);\n"
   "  if(u_numTextures > 1) texColors *= texture2D(u_sampler_2D[1], v_texCoord.st);\n"
   "  \n"
   "  vec3 N = normalize(v_normal);\n"
   "  vec3 L = normalize(-u_lightDir);\n"
   "  vec3 E = normalize(v_eyeVec);\n"
   "  vec3 R = reflect(-L, N);\n"
   "    \n"
   "  float nDotL = max(0.0, dot(N, L));\n"
   "  float specIntesity = pow( max(dot(R, E), 0.0), u_material.shinyness);\n"
   "  vec4 spec = u_material.specular * specIntesity; spec.a = 0.0;\n"
   "  gl_FragColor = texColors * (u_material.ambient + u_material.diffuse * vec4(vec3(nDotL), 1.0)) + spec;\n"
   "}\n"
;

char const* const gouraud_frag = 
   "uniform int u_numTextures;\n"
   "uniform sampler2D u_sampler_2D[1]; \n"
   "varying vec4 v_color;\n"
   "varying vec4 v_texCoord; \n"
   "void main() \n"
   "{\n"
   "  vec4 texColors = vec4(1); \n"
   "  \n"
   "  if(u_numTextures > 0)\n"
   "  {\n"
   "    texColors *= texture(u_sampler_2D[0], v_texCoord.st); \n"
   "  } \n"
   "  gl_FragColor = v_color * texColors; \n"
   "}\n"
;

char const* const points_frag = 
   "uniform int u_numTextures;\n"
   "uniform sampler2D u_sampler_2D[1];\n"
   "uniform struct\n"
   "{\n"
   "  vec4 diffuse;\n"
   "  vec4 ambient;\n"
   "  vec4 specular;\n"
   "  vec4 emission;\n"
   "  float shinyness;\n"
   "} u_material;\n"
   "varying vec4 v_color;\n"
   "void main()\n"
   "{\n"
   "  vec4 texColors = v_color;\n"
   "  if(u_numTextures > 0)\n"
   "  {\n"
   "    texColors *= texture2D(u_textureMap[i], gl_PointCoord);\n"
   "  }\n"
   "  gl_FragColor = u_material.diffuse * texColors;\n"
   "}\n"
;
